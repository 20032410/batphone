<?xml version="1.0" encoding="UTF-8"?>
<project name="batphone" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK and NDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- provides all environmental variables as env.FOO -->
    <property environment="env"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="${env.SERVAL_BATPHONE_ANT_PROPERTIES}" />
    <property file="${env.SERVAL_ANT_PROPERTIES}" />
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <condition property="sdk.dir" value="${env.SDK_ROOT}">
       <isset property="env.SDK_ROOT"/>
    </condition>
    <condition property="ndk.dir" value="${env.NDK_ROOT}">
       <isset property="env.NDK_ROOT"/>
    </condition>
    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or set an SDK_ROOT environment variable."
            unless="sdk.dir"
    />

    <!-- quick check on ndk.dir -->
    <fail
            message="Please set ndk.dir in local.properties or an NDK_ROOT environment variable"
            unless="ndk.dir"
    />

    <!-- version code must be set before loading main_rules.xml -->
    <exec executable="sh" dir="${basedir}" outputproperty="version.code" failifexecutionfails="false">
        <arg value="-c"/>
        <arg value="./git rev-list HEAD | wc -l | sed 's/ //g'"/>
    </exec>
    <exec executable="./git" dir="${basedir}" outputproperty="version.name">
            <arg value="describe" />
    </exec>
    <property name="version.code" value="12345"/>

    <!--  which servald binary would you like to include?
    For debugging with gdb you might wish to add this to your local.properties file;
    servald.binary=${basedir}/obj/local/armeabi/servaldsimple
     -->
    <property name="servald.binary" value="${basedir}/libs/armeabi/servald"/>
    
<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->

    <property name="host.servald" value="${basedir}/jni/serval-dna/servald"/>

    <target name="version">
        <echo>Version Name: ${version.name}</echo>
        <echo>Version Code: ${version.code}</echo>
        <echo file="${basedir}/res/values/version.xml" append="false">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;resources&gt;&lt;string name="version"&gt;${version.name}&lt;/string&gt;&lt;/resources&gt;</echo>
    </target>

    <target name="res-zip">

        <copy file="${basedir}/libs/armeabi/adhoc" tofile="${basedir}/data/bin/adhoc" overwrite="true" failonerror="true"/>
        <copy file="${servald.binary}" tofile="${basedir}/data/bin/servald" overwrite="true" failonerror="true"/>
        <copy file="${basedir}/libs/armeabi/iwconfig" tofile="${basedir}/data/bin/iwconfig" overwrite="true" failonerror="true"/>
        <copy file="${basedir}/libs/armeabi/ifconfig" tofile="${basedir}/data/bin/ifconfig" overwrite="true" failonerror="true"/>
        <copy file="${basedir}/libs/armeabi/iw" tofile="${basedir}/data/bin/iw" overwrite="true" failonerror="true"/>
        	<delete file="${basedir}/assets/serval.zip"/>
	<zip basedir="${basedir}/data" destfile="${basedir}/assets/serval.zip" level="9"/>
	
	<exec executable="sh" dir="${basedir}" failifexecutionfails="false">
	  <arg value="-c"/>
	  <arg value="./git ls-files -o -s data/ > assets/manifest"/>
	</exec>
    </target>

    <target name="-saneconfig">
        <fail if="serval.keyring.pins">Ant property 'serval.keyring.pins' is not allowed for security reasons.</fail>
        <fail if="alpha.serval.keyring.pin">Ant property 'alpha.serval.keyring.pin' is not allowed for security reasons.
- Must be supplied interactively
        </fail>
        <fail if="beta.serval.keyring.pin">Ant property 'beta.serval.keyring.pin' is not allowed for security reasons.
- Must be supplied interactively
        </fail>
        <fail if="release.serval.keyring.pin">Ant property 'release.serval.keyring.pin' is not allowed for security reasons.
- Must be supplied interactively
        </fail>
        <fail if="serval.manifest.secret">Ant property 'serval.manifest.secret' is not allowed.
- Use '${build.type}.serval.manifest.secret' instead
        </fail>
        <fail if="serval.manifest.version">Ant property 'serval.manifest.version' is not allowed.
- Use '${build.type}.serval.manifest.version' instead
        </fail>
        <fail if="serval.manifest.id">Ant property 'serval.manifest.id' is not allowed.
- Use '${build.type}.serval.manifest.id' instead
        </fail>
        <fail if="serval.manifest.bk">Ant property 'serval.manifest.bk' is not allowed.
- Use '${build.type}.serval.manifest.bk' instead
        </fail>
    </target>

    <target name="-args-debug" depends="-saneconfig">
        <property name="build.type" value="debug"/>
        <condition property="serval.manifest.secret" value="${debug.serval.manifest.secret}">
            <isset property="debug.serval.manifest.secret"/>
        </condition>
        <condition property="serval.keyring.path" value="${debug.serval.keyring.path}">
	    <isset property="debug.serval.keyring.path"/>
        </condition>
        <property name="serval.keyring.path" value="${env.HOME}/.serval/serval.keyring.path"/>
        <condition property="serval.manifest.author" value="${debug.serval.manifest.author}">
            <isset property="debug.serval.manifest.author"/>
        </condition>
        <condition property="serval.manifest.id" value="${debug.serval.manifest.id}">
            <isset property="debug.serval.manifest.id"/>
        </condition>
        <condition property="serval.manifest.bk" value="${debug.serval.manifest.bk}">
            <isset property="debug.serval.manifest.bk"/>
        </condition>
        <condition property="skpin" value="${debug.serval.keyring.pin}">
            <isset property="debug.serval.keyring.pin"/>
        </condition>
    </target>

    <target name="-args-alpha" depends="-saneconfig">
        <property name="build.type" value="alpha"/>
        <fail if="alpha.serval.manifest.secret">Ant property 'alpha.serval.manifest.secret' is not allowed.
- Release private keys must not be configured in the clear!
- Use a keyring instead (ideally with a PIN)
        </fail>
        <condition property="serval.keyring.path" value="${alpha.serval.keyring.path}">
	    <isset property="alpha.serval.keyring.path"/>
        </condition>
        <condition property="serval.manifest.author" value="${alpha.serval.manifest.author}">
            <isset property="alpha.serval.manifest.author"/>
        </condition>
        <condition property="serval.manifest.id" value="${alpha.serval.manifest.id}">
            <isset property="alpha.serval.manifest.id"/>
        </condition>
        <condition property="serval.manifest.bk" value="${alpha.serval.manifest.bk}">
            <isset property="alpha.serval.manifest.bk"/>
        </condition>
    </target>

    <target name="-args-beta" depends="-saneconfig">
        <property name="build.type" value="beta"/>
        <fail if="beta.serval.manifest.secret">Ant property 'beta.serval.manifest.secret' is not allowed.
- Release private keys must not be configured in the clear!
- Use a keyring instead (ideally with a PIN)
        </fail>
        <condition property="serval.keyring.path" value="${beta.serval.keyring.path}">
	    <isset property="beta.serval.keyring.path"/>
        </condition>
        <condition property="serval.manifest.author" value="${beta.serval.manifest.author}">
            <isset property="beta.serval.manifest.author"/>
        </condition>
        <condition property="serval.manifest.id" value="${beta.serval.manifest.id}">
            <isset property="beta.serval.manifest.id"/>
        </condition>
        <condition property="serval.manifest.bk" value="${beta.serval.manifest.bk}">
            <isset property="beta.serval.manifest.bk"/>
        </condition>
    </target>

    <target name="-args-release" depends="-saneconfig">
        <property name="build.type" value="release"/>
        <fail if="release.serval.manifest.secret">Ant property 'release.serval.manifest.secret' is not allowed.
- Release private keys must not be configured in the clear!
- Use a keyring instead (ideally with a PIN)
        </fail>
        <condition property="serval.keyring.path" value="${release.serval.keyring.path}">
	    <isset property="release.serval.keyring.path"/>
        </condition>
        <condition property="serval.manifest.author" value="${release.serval.manifest.author}">
            <isset property="release.serval.manifest.author"/>
        </condition>
        <condition property="serval.manifest.id" value="${release.serval.manifest.id}">
            <isset property="release.serval.manifest.id"/>
        </condition>
        <condition property="serval.manifest.bk" value="${release.serval.manifest.bk}">
            <isset property="release.serval.manifest.bk"/>
        </condition>
    </target>

    <target name="serval-instance" unless="serval.instance.path">
	<property name="delete.serval.instance" value="true"/>
	<property name="serval.instance.path" value="${out.absolute.dir}/instance/"/>
        <mkdir dir="${serval.instance.path}" />
        <concat destfile="${serval.instance.path}/serval.conf">log.file.path=serval.log
</concat>
    </target>

    <target name="remove-instance" if="delete.serval.instance">
	<delete dir="${serval.instance.path}"/>
    </target>

    <target name="input-pins" unless="skpin">
        <input message="Please enter Serval ${build.type} PIN:" addproperty="skpin" />
    </target>

    <target name="check-keyring" unless="serval.manifest.secret">
	<fail unless="serval.keyring.path">Ant property 'serval.keyring.path' is not set.
- Set Ant property 'serval.keyring.path' to absolute path of Serval keyring file
        </fail>
        <fail unless="serval.manifest.author">Ant property 'serval.manifest.author' is not set.
- Set Ant property 'serval.manifest.author' or '${build.type}.serval.manifest.author' to SID of signing identity
        </fail>
	<fail unless="skpin">Ant property 'skpin' is not set -- bug in build.xml.</fail>
        <property name="serval.keyring.pins" value="--entry-pin=${skpin}" />
    </target>

    <target name="check-manifest-author" depends="input-pins,check-keyring,serval-instance" unless="serval.manifest.secret">
        <exec executable="${basedir}/jni/serval-dna/servald" failonerror="true" logError="true" outputproperty="-keyring-list">
	    <env key="SERVALINSTANCE_PATH" value="${serval.instance.path}"/>
	    <env key="SERVALD_KEYRING_PATH" value="${serval.keyring.path}"/>
	    <env key="SERVALD_KEYRING_READONLY" value="true"/>
            <arg value="keyring"/>
            <arg value="list"/>
	    <arg line="${serval.keyring.pins}"/>
        </exec>
        <condition property="found.manifest.author">
            <and>
                <contains string="${-keyring-list}" substring="${serval.manifest.author}" casesensitive="false"/>
                <length string="${serval.manifest.author}" when="greater" length="0" />
		<isset property="serval.manifest.author"/>
            </and>
        </condition>
        <condition property="-keyring-pins-desc" value=" with ${serval.keyring.pins}">
            <length string="${serval.keyring.pins}" when="greater" length="0" />
        </condition>
        <property name="-keyring-pins-desc" value=" with no keyring PINs" />
	<fail unless="found.manifest.author">Author SID ${serval.manifest.author} is not in keyring ${serval.keyring.path}
- export SERVALD_KEYRING_PATH="${serval.keyring.path}"
- Ensure ${serval.keyring.path} contains an identity${-keyring-pins-desc}
- Set Ant property 'serval.manifest.author' or '${build.type}.serval.manifest.author' to SID of the identity
        </fail>
    </target>

    <target name="check-manifest-id">
        <fail>
	    <condition><not><and>
                <isset property="serval.manifest.id"/>
                <length string="${serval.manifest.id}" when="greater" length="0" />
            </and></not></condition>
Manifest ID has not been configured for signed ${build.type} builds.
- export SERVALD_KEYRING_PATH="${serval.keyring.path}"
- export SERVALD_KEYRING_READONLY=true
- To create a new ID, add an empty file to Rhizome, note the reported 'manifestid'
- Set Ant property '${build.type}.serval.manifest.id'
        </fail>
    </target>

    <target name="check-manifest-secret">
        <fail>
            <condition>
                <and>
                    <isset property="serval.manifest.secret"/>
                    <isset property="serval.manifest.bk"/>
                </and>
            </condition>
Ant properties '${build.type}.serval.manifest.bk' and '${build.type}.serval.manifest.secret' are both set.
- Only one or the other should be configured
        </fail>
    </target>

    <target name="check-manifest-bk" unless="serval.manifest.secret">
        <fail>
	    <condition><not><and>
                <isset property="serval.manifest.bk"/>
                <length string="${serval.manifest.bk}" when="greater" length="0" />
            </and></not></condition>
Manifest BK (Bundle Key) has not been configured for signed ${build.type} builds.
- export SERVALD_KEYRING_PATH="${serval.keyring.path}"
- export SERVALD_KEYRING_READONLY=true
- Extract the Manifest from Rhizome with ID ${serval.manifest.id}
- Set Ant property '${build.type}.serval.manifest.bk' to the BK field from the Manifest
        </fail>
    </target>

    <target name="check-manifest" depends="check-manifest-id,check-manifest-secret,check-manifest-bk,check-manifest-author">
    </target>

    <target name="create-manifest" depends="version,serval-instance,input-pins,check-keyring">
        <!-- Make sure parameters are blank if not supplied -->
        <property name="serval.manifest.file" value="${out.final.file}.manifest"/>
        <property name="serval.manifest.secret" value=""/>
        <property name="serval.manifest.author" value=""/>
        <property name="serval.manifest.version" value=""/>
        <property name="serval.manifest.id" value=""/>
        <property name="serval.manifest.bk" value=""/>
	<property name="serval.keyring.pins" value=""/>

        <condition property="-manifest.id" value="id=${serval.manifest.id}">
            <length string="${serval.manifest.id}" when="greater" length="0" />
        </condition>
        <property name="-manifest.id" value=""/>

        <condition property="-manifest.bk" value="BK=${serval.manifest.bk}">
            <length string="${serval.manifest.bk}" when="greater" length="0" />
        </condition>
        <property name="-manifest.bk" value=""/>

        <condition property="-manifest.version" value="version=${serval.manifest.version}">
            <length string="${serval.manifest.version}" when="greater" length="0" />
        </condition>
        <property name="-manifest.version" value=""/>
        <!-- Construct manifest -->
<echo file="${out.final.file}.manifest" append="false">name=Serval-${version.name}.apk
service=file
${-manifest.id}
${-manifest.bk}
${-manifest.version}
</echo>
        <!-- Add the apk to our local rhizome store -->
        <exec executable="${basedir}/jni/serval-dna/servald" failonerror="true">
	    <env key="SERVALINSTANCE_PATH" value="${serval.instance.path}"/>
	    <env key="SERVALD_KEYRING_PATH" value="${serval.keyring.path}"/>
	    <env key="SERVALD_KEYRING_READONLY" value="true"/>
            <arg value="rhizome"/>
            <arg value="add"/>
            <arg value="file"/>
	    <arg line="${serval.keyring.pins}"/>
            <arg value="${serval.manifest.author}"/>
            <arg file="${out.final.file}"/>
            <arg file="${out.final.file}.manifest"/>
            <arg value="${serval.manifest.secret}"/>
        </exec>

        <!-- Append the payload and manifest into a single file -->
        <exec executable="${basedir}/jni/serval-dna/servald" failonerror="true">
	    <env key="SERVALINSTANCE_PATH" value="${serval.instance.path}"/>
            <arg value="rhizome"/>
            <arg value="append"/>
            <arg value="manifest"/>
	    <arg line="${serval.keyring.pins}"/>
            <arg file="${out.final.file}"/>
            <arg file="${out.final.file}.manifest"/>
        </exec>

    </target>

    <target name="debug-autoup" depends="-args-debug,check-manifest,debug,create-manifest,remove-instance"/>
    <target name="alpha" depends="-args-alpha,check-manifest,android_rules.release,create-manifest,remove-instance"/>
    <target name="beta" depends="-args-beta,check-manifest,android_rules.release,create-manifest,remove-instance"/>
    <target name="release" depends="-args-release,check-manifest,android_rules.release,create-manifest,remove-instance"/>

    <target name="upload-release" depends="version">
        <property name="build-folder" value="unstable/"/>
        <exec executable="scp" dir="${basedir}">
            <arg value="${basedir}/bin/batphone-release.apk"/>
            <arg value="${webserver}/files/${build-folder}Serval_Mesh-${version.name}.apk"/>
        </exec>
    </target>

    <target name="ndk-build">
      <exec executable="${ndk.dir}/ndk-build" failonerror="true"/>
    </target>
    
    <target name="-pre-build" depends="version,ndk-build,res-zip" />

    <target name="clean-all" depends="clean">
      <exec executable="${ndk.dir}/ndk-build" failonerror="true">
	<arg value="clean"/>
      </exec>
      <delete file="${basedir}/data/bin/adhoc" quiet="true"/>
      <delete file="${basedir}/data/bin/batmand" quiet="true"/>
      <delete file="${basedir}/data/bin/servald" quiet="true"/>
      <delete file="${basedir}/data/bin/iwlist" quiet="true"/>
      <delete file="${basedir}/data/bin/olsrd" quiet="true"/>
    </target>

    <target name="-pre-compile"/>

<!--
    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
